from sm5166 import SM5166P
from sm16106 import SM16106SC
from i2cpico import I2CPico
#from ds3231 import DS3231
import framebuf
import sys
import time

class WaveshareClockGreen:
    def __init__(self, width, height):
        self.row = SM5166P(16, 18, 22)
        self.column = SM16106SC(10, 11, 12, 13)
        self.i2c = I2CPico(1, 6, 7)
        #self.rtc = DS3231(0, i2c, 3)
        self.width = width
        self.height = height
        self.picture = bytearray(36)

    class Champ:
        def __init__(self, valeur, bitDepart, nbBit):
            self.__bitDepart = bitDepart
            self.__nbBit = nbBit
            self.__valeur = valeur

        def valeur(self):
            return self.__valeur

        def nbByte(self):
            nb = self.__nbBit >> 3
            if (self.__nbBit % 8) > 0:
                nb = 1 + (self.__nbBit >> 3)
            return nb

        def nbBit(self):
            return self.__nbBit

        def bitDepart(self):
            return self.__bitDepart

    def encode(self, champDst, champSrc):
        for i in range(champSrc.nbBit()):
            
            i_octet = (champDst.bitDepart() + i) >> 3
            i_bit = champDst.bitDepart() + i - (i_octet << 3)

            octet = (champSrc.bitDepart() + i) >> 3
            bit = champSrc.bitDepart() + i - (octet << 3)

            valeur = (champSrc.__valeur[octet] & (1 << bit)) >> bit
        
            champDst.__valeur[i_octet] = (champDst.__valeur[i_octet] & ~(1 << i_bit)) | (valeur << i_bit)


    def show(self, buffer, x, y):
        for i in range(8):
            if i < 7:
                self.encode(self.Champ(self.picture, 32*i+34, 22), self.Champ(buffer, self.width * (i), 22))
            clock.column.send(self.picture[i<<2:(i<<2)+4])
            clock.row.setChannel(i)
            clock.column.latch()


Monday = b'\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Tuesday = b'\xC0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Wednesday = b'\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Thurday = b'\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Friday = b'\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Saturday = b'\x00\x00\x00\x0C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Sunday = b'\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
led1 = b'\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
led2 = b'\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
MoveOn = b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
AlarmOn = b'\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
CountDown = b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
°F = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
°C = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
AM = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
PM = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
CountUp = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Hourly = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00'
AutoLight =  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'


width = 128
height = 7
clock = WaveshareClockGreen(width, height)
clock.column.OutputEnable()

buffer = bytearray(width * height // 8)
frame = framebuf.FrameBuffer(buffer, width, height, framebuf.MONO_HMSB) # 154 bits / 20 octets
frame.fill(0)
frame.text('14:30', 0, 0, 1)

i=0
while True:
    clock.show(buffer, i, 0)
    frame.scroll(-1,0)
    if i > 128:
        i=0
        frame.fill(0)
        frame.text('Hello World !!!', 0, 0)
    i+=1
        
