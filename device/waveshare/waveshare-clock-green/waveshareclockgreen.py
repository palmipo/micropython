from sm5166 import SM5166P
from sm16106 import SM16106SC
from i2cpico import I2CPico
from ds3231_sqw import DS3231_SQW
import micropython
import machine

micropython.alloc_emergency_exception_buf(100)

class WaveshareClockGreen:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.picture = bytearray(4)

        self.row = SM5166P(16, 18, 22)
        self.column = SM16106SC(10, 11, 12, 13)
        
        self.i2c = I2CPico(1, 6, 7)
        self.rtc = DS3231_SQW(0, self.i2c, 3, self.__irq__)
        self.rtc.setControlRegister(0x01, 0x00, 0x00, 0x00, 0x00)

        self.K0 = machine.Pin(15, machine.Pin.IN, machine.Pin.PULL_UP)
        self.K0.irq(handler=self.__callback__, trigger=machine.Pin.IRQ_FALLING, hard=True)

        self.K1 = machine.Pin(17, machine.Pin.IN, machine.Pin.PULL_UP)
        self.K1.irq(handler=self.__callback__, trigger=machine.Pin.IRQ_FALLING, hard=True)
        
        self.K2 = machine.Pin(2, machine.Pin.IN, machine.Pin.PULL_UP)
        self.K2.irq(handler=self.__callback__, trigger=machine.Pin.IRQ_FALLING, hard=True)
        
        self.buzzer = machine.Pin(14, machine.Pin.OUT)

    def __callback__(self, pin):
        state = machine.disable_irq()
        try:
            print('bouton pressed {}'.format(pin.value()))
        except BaseException:
            print('WaveshareClockGreen exception callback')
        machine.enable_irq(state)

    def __irq__(self, pin):
        self.buzzer.toggle()

    class Champ:
        def __init__(self, valeur, bitDepart, nbBit):
            self.__bitDepart = bitDepart
            self.__nbBit = nbBit
            self.__valeur = valeur

        def valeur(self):
            return self.__valeur

        def nbByte(self):
            nb = self.__nbBit >> 3
            if (self.__nbBit % 8) > 0:
                nb = 1 + (self.__nbBit >> 3)
            return nb

        def nbBit(self):
            return self.__nbBit

        def bitDepart(self):
            return self.__bitDepart

    def encode(self, champDst, champSrc):
        for i in range(champSrc.nbBit()):
            
            i_octet = (champDst.bitDepart() + i) >> 3
            i_bit = champDst.bitDepart() + i - (i_octet << 3)

            octet = (champSrc.bitDepart() + i) >> 3
            bit = champSrc.bitDepart() + i - (octet << 3)

            valeur = (champSrc.__valeur[octet] & (1 << bit)) >> bit
        
            champDst.__valeur[i_octet] = (champDst.__valeur[i_octet] & ~(1 << i_bit)) | (valeur << i_bit)
#             print(i_octet, i_bit, octet, bit)

    def show(self, buffer, x, y):
        for i in range(8):
            if i == 0:
                self.picture[0] = 0
                self.picture[1] = 0
                self.picture[2] = 0
                self.picture[3] = 0
            else:
                self.encode(self.Champ(self.picture, 2, 22), self.Champ(buffer, x + self.width * (y + i-1), 22))
            self.column.send(self.picture)
            self.row.setChannel(i)
            self.column.latch()


# Monday = b'\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# Tuesday = b'\xC0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# Wednesday = b'\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# Thurday = b'\x00\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# Friday = b'\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# Saturday = b'\x00\x00\x00\x0C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# Sunday = b'\x00\x00\x00\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# led1 = b'\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# led2 = b'\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# MoveOn = b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# AlarmOn = b'\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# CountDown = b'\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# °F = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# °C = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# AM = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# PM = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# CountUp = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
# Hourly = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00'
# AutoLight =  b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00'
